<#@ template debug="false" hostspecific="true" language="C#" #>
<#@ assembly name="System.Core" #>
<#@ import namespace="System.Linq" #>
<#@ import namespace="System.Text" #>
<#@ import namespace="System.IO" #>
<#@ import namespace="System.Collections.Generic" #>
<#@ output extension=".cs" #>
using System.Collections.Generic;
using System.Linq;
using TechTalk.SpecFlow;
using TechTalk.SpecFlow.Assist;

namespace FagdagCqrs.Specs.Arguments
{
    [Binding]
	public class SpecflowTransformations
	{
	<# foreach(var file in Directory.GetFiles(Host.ResolvePath(""), "*.cs")){  #>	
		<# string className = Path.GetFileNameWithoutExtension(file); #>
		<# if(className.Equals("SpecflowTransformations")) continue; #>
		<# if(className.Equals("TableTransformationValidator")) continue; #>
	    
		[StepArgumentTransformation]
        public IEnumerable<<#= className #>> <#= className #>Enumerable(Table table)
        {
			table.ValidateTransformation<<#= className #>>();
            return table.CreateSet<<#= className #>>();
        }

	    [StepArgumentTransformation]
        public IList<<#= className #>> <#= className #>List(Table table)
        {
			table.ValidateTransformation<<#= className #>>();
            return table.CreateSet<<#= className #>>().ToList();
        }

        [StepArgumentTransformation]
        public <#= className #> <#= className #>(Table table)
        {
            table.ValidateTransformation<<#= className #>>();
            return table.CreateInstance<<#= className #>>();
        }
	<# } #>
	}

}